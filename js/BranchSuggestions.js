// Generated by CoffeeScript 1.7.1
(function() {
  var BranchSuggestions;

  BranchSuggestions = (function() {
    function BranchSuggestions(branches, attachedNode, clickCb) {
      var key, oldResizeCb;
      this.attachedNode = attachedNode;
      this.clickCb = clickCb;
      this.parent = document.querySelector('#branch-suggestions');
      this.list = this.parent.querySelector('#suggestion-list');
      this.shown = false;
      this.branches = {};
      this.branchNames = [];
      for (key in branches) {
        this.branches[key] = this.createElement(key);
        this.branchNames.push(key);
      }
      this.branchNames.sort(function(a, b) {
        var c, d;
        c = a.toLowerCase();
        d = b.toLowerCase();
        if (c === d) {
          return 0;
        }
        if (c < d) {
          return -1;
        }
        if (c > d) {
          return 1;
        }
      });
      oldResizeCb = window.onresize;
      window.onresize = (function(_this) {
        return function() {
          _this.reflow();
          return typeof oldResizeCb === "function" ? oldResizeCb() : void 0;
        };
      })(this);
    }

    BranchSuggestions.prototype.createElement = function(name) {
      var listItem;
      listItem = document.createElement('li');
      listItem.className = "suggestion";
      listItem.innerHTML = name;
      listItem.addEventListener('click', this.clickCb, true);
      return listItem;
    };

    BranchSuggestions.prototype.show = function() {
      var branchName, fragment, _i, _len, _ref;
      if (this.shown) {
        return;
      }
      this.shown = true;
      this.reflow();
      fragment = document.createDocumentFragment();
      _ref = this.branchNames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        branchName = _ref[_i];
        this.branches[branchName].innerHTML = branchName;
        fragment.appendChild(this.branches[branchName]);
      }
      this.list.appendChild(fragment);
      return this.parent.style.display = "block";
    };

    BranchSuggestions.prototype.clear = function() {
      var _results;
      _results = [];
      while (this.list.firstChild) {
        _results.push(this.list.removeChild(this.list.firstChild));
      }
      return _results;
    };

    BranchSuggestions.prototype.hide = function() {
      if (!this.shown) {
        return;
      }
      this.clear();
      this.parent.style.display = "none";
      return this.shown = false;
    };

    BranchSuggestions.prototype.filter = function(string) {
      var branch, branchName, endIndex, fragment, match, startIndex, _i, _len, _ref;
      this.clear();
      fragment = document.createDocumentFragment();
      _ref = this.branchNames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        branchName = _ref[_i];
        if (-1 < (startIndex = branchName.toLowerCase().indexOf(string.toLowerCase()))) {
          endIndex = startIndex + string.length;
          match = branchName.slice(startIndex, endIndex);
          branch = this.branches[branchName];
          branch.innerHTML = branchName.slice(0, startIndex) + "<span class='match'>" + match + "</span>" + branchName.slice(endIndex, branchName.length);
          fragment.appendChild(branch);
        }
      }
      return this.list.appendChild(fragment);
    };

    BranchSuggestions.prototype.reflow = function() {
      var contentBounds, inputBounds;
      if (!this.shown) {
        return;
      }
      contentBounds = document.querySelector('#content').getBoundingClientRect();
      inputBounds = this.attachedNode.getBoundingClientRect();
      this.parent.style.top = inputBounds.top + inputBounds.height - contentBounds.top + 'px';
      return this.parent.style.left = inputBounds.left - contentBounds.left + 'px';
    };

    return BranchSuggestions;

  })();

  window.BranchSuggestions = BranchSuggestions;

}).call(this);
